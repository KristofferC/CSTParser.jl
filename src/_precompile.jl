function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    for t in (CSTParser.INSTANCE, CSTParser.IDENTIFIER, CSTParser.OPERATOR, CSTParser.KEYWORD, CSTParser.PUNCTUATION, CSTParser.LITERAL)
        precompile(t, (CSTParser.ParseState,))
        precompile(typeof(t), (CSTParser.ParseState,))
    end
    precompile(CSTParser.IDENTIFIER, (Int, UnitRange{Int}, String))
    precompile(CSTParser.parse_for, (CSTParser.ParseState,))
    precompile(CSTParser.parse_ranges, (CSTParser.ParseState,))
    precompile(CSTParser.is_range, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.parse_while, (CSTParser.ParseState,))

    precompile(CSTParser.parse_begin, (CSTParser.ParseState,))
    precompile(CSTParser.parse_quote, (CSTParser.ParseState,))

    precompile(CSTParser.parse_const, (CSTParser.ParseState,))
    precompile(CSTParser.parse_global, (CSTParser.ParseState,))
    precompile(CSTParser.parse_local, (CSTParser.ParseState,))
    precompile(CSTParser.parse_return, (CSTParser.ParseState,))
    precompile(CSTParser.parse_end, (CSTParser.ParseState,))

    precompile(CSTParser.parse_abstract, (CSTParser.ParseState,))
    precompile(CSTParser.parse_bitstype, (CSTParser.ParseState,))
    precompile(CSTParser.parse_primitive, (CSTParser.ParseState,))
    precompile(CSTParser.parse_typealias, (CSTParser.ParseState,))
    precompile(CSTParser.parse_mutable, (CSTParser.ParseState,))
    precompile(CSTParser.parse_struct, (CSTParser.ParseState, Bool))
    
    precompile(CSTParser.parse_let, (CSTParser.ParseState,))
    precompile(CSTParser.parse_try, (CSTParser.ParseState,))
    precompile(CSTParser.parse_function, (CSTParser.ParseState,))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_comma_sep, (CSTParser.ParseState, Array{Any,1}, Bool, Bool, Bool))



    precompile(CSTParser.LtoR, (Int64,))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.BinarySyntaxOpCall, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser._parse_ref, (CSTParser.UnarySyntaxOpCall, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Vect}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser._parse_ref, (CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.adjustspan, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.dropleadlingnewline, (CSTParser.LITERAL{Tokenize.Tokens.STRING},))
    precompile(CSTParser.dropleadlingnewline, (CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_STRING},))
    precompile(CSTParser.dropleadlingnewline, (CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_CMD},))
    precompile(CSTParser.is_func_call, (CSTParser.WhereOpCall,))
    precompile(CSTParser.is_range, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.is_range, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ISA,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.REM,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.AND,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.OR,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQ,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true},))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ISA,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.UNION,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false},))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false},))
    precompile(CSTParser.isunaryop, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.isunaryop, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Call},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.TupleH},))
    precompile(CSTParser.isunaryop, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.isunaryop, (CSTParser.UnarySyntaxOpCall,))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.INTEGER},))
    precompile(CSTParser.isunaryop, (CSTParser.UnaryOpCall,))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.InvisBrackets},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Vect},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.CHAR},))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.STRING},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.isunaryop, (CSTParser.WhereOpCall,))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.FALSE},))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.TRUE},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Quotenode},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.x_Str},))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall,))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Comprehension},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Quote},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.FLOAT},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.MacroCall},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Begin},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Vcat},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Hcat},))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Generator},))
    precompile(CSTParser.longest_common_prefix, (String, String))
    precompile(CSTParser.parse_block, (CSTParser.ParseState, Array{Any,1}, Tuple{Tokenize.Tokens.Kind,Tokenize.Tokens.Kind}, Bool))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_string_or_cmd, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.WhereOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Import},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Generator},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Filter},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Flatten},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.x_Cmd},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ModuleH},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Using},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Struct},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Mutable},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ColonOpCall},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedVcat},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.BareModule},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ImportAll},))
end
