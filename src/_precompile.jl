function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing

    precompile(CSTParser.INSTANCE, (CSTParser.ParseState,))
    precompile(CSTParser.IDENTIFIER, (CSTParser.ParseState,))
    precompile(CSTParser.IDENTIFIER, (Int, UnitRange{Int},String))
    precompile(CSTParser.PUNCTUATION, (CSTParser.ParseState,))
    precompile(CSTParser.KEYWORD, (CSTParser.ParseState,))
    precompile(CSTParser.OPERATOR, (CSTParser.ParseState,))
    precompile(CSTParser.LITERAL, (CSTParser.ParseState,))
    precompile(CSTParser.isidentifier, (Tokenize.Tokens.Token,))
    precompile(CSTParser.isliteral, (Tokenize.Tokens.Token,))
    precompile(CSTParser.iskw, (Tokenize.Tokens.Token,))
    precompile(CSTParser.isoperator, (Tokenize.Tokens.Token,))
    precompile(CSTParser.ispunctuation, (Tokenize.Tokens.Token,))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState,))
    
    precompile(CSTParser.next, (CSTParser.ParseState,))
    precompile(CSTParser.isunaryop, (Tokenize.Tokens.Kind,))
    precompile(CSTParser.isbinaryop, (Tokenize.Tokens.Kind,))
    precompile(CSTParser.non_dotted_op, (Tokenize.Tokens.Token,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.FileH},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ERROR},))
    precompile(CSTParser.skip_to_nl, (String, Int64))
    precompile(CSTParser.precedence, (Tokenize.Tokens.Kind,))
    precompile(CSTParser.closer, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Kw},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Block},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Parameters},))
    precompile(CSTParser.parse_comma_sep, (CSTParser.ParseState, Array{Any,1}, Bool, Bool, Bool))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.InvisBrackets},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TupleH},))
    precompile(CSTParser.parse_paren, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Vect},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.DictComprehension},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Comprehension},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Vcat},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Hcat},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Row},))
    precompile(CSTParser.parse_array, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Cell1d},))
    precompile(CSTParser.parse_cell1d, (CSTParser.ParseState,))
    precompile(CSTParser.iskw, (Tokenize.Tokens.Token,))
    precompile(CSTParser.isinstance, (Tokenize.Tokens.Token,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.MacroName},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Quotenode},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.MacroCall},))
    precompile(CSTParser.parse_comma_sep, (CSTParser.ParseState, Array{Any,1}, Bool))
    precompile(CSTParser.parse_macrocall, (CSTParser.ParseState,))
    precompile(CSTParser.make_error, (CSTParser.ParseState, UnitRange{Int64}, CSTParser.Diagnostics.ErrorCodes, String))
    precompile(CSTParser.error_unexpected, (CSTParser.ParseState, Tokenize.Tokens.Token))
    precompile(CSTParser.error_token, (CSTParser.ParseState, Tokenize.Tokens.Token))
    precompile(CSTParser.parse_expression, (CSTParser.ParseState,))
    precompile(CSTParser.parse_string_or_cmd, (CSTParser.ParseState, Bool))
    precompile(CSTParser.ispunctuation, (Tokenize.Tokens.Token,))
    
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.x_Str},))
    precompile(CSTParser.parse_doc, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TopLevel},))
    precompile(CSTParser.parse, (CSTParser.ParseState, Bool))
    precompile(CSTParser.parse, (String, Bool))
    precompile(CSTParser.read_comment, (Tokenize.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8,1}},Tokenize.Tokens.Token},))
    precompile(CSTParser.read_ws, (Tokenize.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8,1}},Tokenize.Tokens.Token}, Bool, Bool))
    precompile(CSTParser.lex_ws_comment, (Tokenize.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8,1}},Tokenize.Tokens.Token}, Char))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Generator},))
    precompile(CSTParser.parse_ranges, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Filter},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Flatten},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.error_eof, (CSTParser.ParseState, Int64, CSTParser.Diagnostics.ErrorCodes, String))
    precompile(CSTParser.parse_block, (CSTParser.ParseState, Array{Any,1}, Tuple{Tokenize.Tokens.Kind}, Bool))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.LtoR, (Int64,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Call},))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.isunaryop, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.parse_string_or_cmd, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.x_Cmd},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.IDENTIFIER))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.utf8proc_map_custom, (String, Int64, Function))
    precompile(CSTParser.julia_normalization_map, (Int32, Ptr{Void}))
    precompile(CSTParser.remlineinfo!, (Expr,))
    precompile(CSTParser.remlineinfo!, (Symbol,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.isunaryop, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.parse_string_or_cmd, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ColonOpCall},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Quote},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.remlineinfo!, (QuoteNode,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.InvisBrackets},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.isunaryop, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.BinaryOpCall))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.isunaryop, (CSTParser.WhereOpCall{CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.RIGHT_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LPIPE,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LPIPE,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Call},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.INTEGER},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}))
    precompile(CSTParser.sized_uint_literal, (String, Int64))
    precompile(CSTParser.sized_uint_oct_literal, (String,))
    precompile(CSTParser.remlineinfo!, (Int64,))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.TupleH},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.FunctionDef},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Return},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Abstract},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Bitstype},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypeAlias},))
    precompile(CSTParser.parse_struct, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Mutable},))
    precompile(CSTParser.remlineinfo!, (Bool,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Struct},))
    precompile(CSTParser.parse_struct, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_dot_mod, (CSTParser.ParseState, Bool))
    precompile(CSTParser.parse_imports, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Import},))
    precompile(CSTParser._get_import_block, (CSTParser.EXPR{CSTParser.Import}, Int64, Expr))
    precompile(CSTParser.expr_import, (CSTParser.EXPR{CSTParser.Import}, Symbol))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.DOT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.COLON,false},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Export},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.is_range, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.convert_iter_assign, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.is_range, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.convert_iter_assign, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Generator},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.get_inner_gen, (CSTParser.EXPR{CSTParser.Generator}, Array{Any,1}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Flatten},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Flatten}))
    precompile(CSTParser.get_inner_gen, (CSTParser.EXPR{CSTParser.Flatten}, Array{Any,1}, Array{Any,1}))
    precompile(CSTParser.convert_iter_assign, (CSTParser.EXPR{CSTParser.Filter},))
    precompile(CSTParser.convert_iter_assign, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.remlineinfo!, (String,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedVcat},))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedHcat},))
    precompile(CSTParser._parse_ref, (CSTParser.IDENTIFIER, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_block, (CSTParser.ParseState, Array{Any,1}, Tuple{Tokenize.Tokens.Kind,Tokenize.Tokens.Kind,Tokenize.Tokens.Kind}, Bool))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.If},))
    precompile(CSTParser.parse_if, (CSTParser.ParseState, Bool))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Try},))
    precompile(CSTParser.parse_block, (CSTParser.ParseState, Array{Any,1}, Tuple{Tokenize.Tokens.Kind,Tokenize.Tokens.Kind}, Bool))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.For},))
    precompile(CSTParser.fix_range, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Let},))
    precompile(CSTParser.longest_common_prefix, (String, String))
    precompile(CSTParser.dropleadlingnewline, (CSTParser.LITERAL{Tokenize.Tokens.STRING},))
    precompile(CSTParser.adjustspan, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.span, (CSTParser.LITERAL{Tokenize.Tokens.STRING},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ISA,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Begin},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.isunaryop, (CSTParser.UnarySyntaxOpCall,))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser._parse_ref, (CSTParser.BinarySyntaxOpCall, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.If},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.If}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.MacroCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.fix_range, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.x_Cmd},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Cmd}))
    precompile(CSTParser.span, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.remlineinfo!, (Float64,))
    precompile(CSTParser.remlineinfo!, (Char,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.isunaryop, (CSTParser.UnaryOpCall,))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.UnaryOpCall))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.isunaryop, (CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_module, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ModuleH},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.remlineinfo!, (GlobalRef,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Using},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Primitive},))
    precompile(CSTParser.norm_ast, (Expr,))
    precompile(CSTParser.check_base, (String, Bool))
    precompile(CSTParser.check_base, ())
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Macro},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser._parse_ref, (CSTParser.UnarySyntaxOpCall, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Const},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FileH}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FileH},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{nothing}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ModuleH}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.MODULE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.IDENTIFIER, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Block}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Import}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.IMPORT}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Export}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.EXPORT}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.COMMA}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.MacroName}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.AT_SIGN}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FunctionDef}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.FUNCTION}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.END}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Abstract}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.ABSTRACT}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.TYPE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Curly}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.LBRACE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.BinarySyntaxOpCall, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.IDENTIFIER,))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false},))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.RBRACE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Call}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Call},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DOT,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Quotenode}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Quotenode},))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.LPAREN}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.UnarySyntaxOpCall, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.RPAREN}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Block},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TupleH}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TupleH},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.If}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.IF}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.BinaryOpCall, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.check_span, (CSTParser.BinaryOpCall,))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.INTEGER},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Quote}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.InvisBrackets}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Comparison}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.ELSEIF}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false},))
    precompile(CSTParser.check_span, (CSTParser.UnarySyntaxOpCall,))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.InvisBrackets},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Ref}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.LSQUARE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.RSQUARE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.COLON,false},))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.ELSE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.MacroCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.GlobalRefDoc}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.STRING}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Macro}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.MACRO}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false},))
    precompile(CSTParser.check_span, (CSTParser.BinarySyntaxOpCall,))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Quote},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser.check_span, (CSTParser.UnaryOpCall, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.UnaryOpCall,))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT,false},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.FALSE},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.For}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.FOR}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.TRUE},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TypedComprehension}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Generator}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.QUOTE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Primitive}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.PRIMITIVE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Return}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.RETURN}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Let}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.LET}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.BREAK}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.FALSE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.x_Str}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.x_Str},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Const}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.CONST}, Array{Any,1}))
    precompile(CSTParser.norm_ast, (Bool,))
    precompile(CSTParser.norm_ast, (Symbol,))
    precompile(CSTParser.norm_ast, (QuoteNode,))
    precompile(CSTParser.norm_ast, (Int64,))
    precompile(CSTParser.norm_ast, (String,))
    precompile(CSTParser.norm_ast, (GlobalRef,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Vect},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.While},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.CHAR},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.STRING},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Global},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Local},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Using}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.USING}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Struct}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.STRUCT}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Mutable}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.MUTABLE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.CHAR},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Return},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Vect}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.TRUE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Vect},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.STRING},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.While}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.WHILE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Kw}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Parameters}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.MacroCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.FALSE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ChainOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Try}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.TRY}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.FINALLY}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.BREAK},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.CHAR}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.CHAR}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.CONTINUE},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Do}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.DO}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Begin}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.BEGIN}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Global}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.GLOBAL}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Local}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.LOCAL}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.CATCH}, Array{Any,1}))
    precompile(CSTParser._get_import_block, (CSTParser.EXPR{CSTParser.Using}, Int64, Expr))
    precompile(CSTParser.expr_import, (CSTParser.EXPR{CSTParser.Using}, Symbol))
    precompile(CSTParser.norm_ast, (Char,))
    precompile(CSTParser.norm_ast, (UInt8,))
    precompile(CSTParser.norm_ast, (Void,))
    precompile(CSTParser.remlineinfo!, (UInt8,))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.FALSE},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FALSE}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.TRUE},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Quotenode},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.x_Str},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ColonOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FunctionDef},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.CONTINUE}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ISA,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ISA,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Try},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.FLOAT},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Vcat}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Vcat},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ISA,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.If},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.norm_ast, (Float64,))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.CMD}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.LBRACE},))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.COMMA},))
    precompile(CSTParser.check_span, (CSTParser.PUNCTUATION{Tokenize.Tokens.RBRACE},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TypedVcat}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.norm_ast, (UInt64,))
    precompile(CSTParser.norm_ast, (UInt32,))
    precompile(CSTParser.remlineinfo!, (UInt64,))
    precompile(CSTParser.remlineinfo!, (UInt32,))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Comprehension},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Comprehension}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Comprehension},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.isunaryop, (CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ColonOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.EXPR{CSTParser.StringH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.EXPR{CSTParser.StringH}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.COLON,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.AND,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,true},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.TRUE},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.TRUE},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Quote},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DDOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EX_OR,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.norm_ast, (UInt16,))
    precompile(CSTParser.remlineinfo!, (UInt16,))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.LITERAL{Tokenize.Tokens.TRUE}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TypedVcat},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}}}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.LITERAL{Tokenize.Tokens.CMD}}, Array{Any,1}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LESS,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER},))
    precompile(CSTParser.norm_ast, (UInt128,))
    precompile(CSTParser.remlineinfo!, (UInt128,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.isunaryop, (CSTParser.LITERAL{Tokenize.Tokens.FLOAT},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.StringH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.UnaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.BareModule},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.BareModule}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.BAREMODULE}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.LITERAL{Tokenize.Tokens.TRUE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.TupleH},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.REM,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.REM,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.AND,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.AND,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.OR,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.OR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Begin},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.ChainOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.ChainOpCall}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.REM,true},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.AND,true},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.OR,true},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.UnaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Vect}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ImportAll},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ImportAll}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.KEYWORD{Tokenize.Tokens.IMPORTALL}, Array{Any,1}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false},))
    precompile(CSTParser._get_import_block, (CSTParser.EXPR{CSTParser.ImportAll}, Int64, Expr))
    precompile(CSTParser.expr_import, (CSTParser.EXPR{CSTParser.ImportAll}, Symbol))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR,true},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnarySyntaxOpCall,CSTParser.UnarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUPERTYPE,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CUBE_ROOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Vect}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.norm_ast, (Float32,))
    precompile(CSTParser.remlineinfo!, (Float32,))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.UnaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.UnaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_OR,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Curly}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.TRUE},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.For},))
    precompile(CSTParser.norm_ast, (Int128,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.LITERAL{Tokenize.Tokens.CMD}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.LITERAL{Tokenize.Tokens.CMD}},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.CMD},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.EXPR{CSTParser.Call}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinarySyntaxOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.LAZY_AND,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,true},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.FLOAT}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.UnarySyntaxOpCall,CSTParser.UnarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnaryOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.ChainOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.FALSE},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.IN,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.XOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.REM,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IDENTICAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LPIPE,false}, Array{Any,1}))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NOT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUBTYPE,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.LPIPE,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.APPROX,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.EQEQEQ,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.ISSUPERTYPE,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.UNION,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.SQUARE_ROOT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.CUBE_ROOT,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.XOR,false},))
    precompile(CSTParser.precedence, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.StringH}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.StringH}}}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.OR,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.OR,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.isunaryop, (CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}, CSTParser.OPERATOR{Tokenize.Tokens.WHERE,false}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}}}}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.TupleH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnarySyntaxOpCall,CSTParser.UnarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.UnarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnarySyntaxOpCall,CSTParser.UnarySyntaxOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.UnarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.UnarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.LITERAL{Tokenize.Tokens.CHAR}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DECLARATION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}, CSTParser.OPERATOR{Tokenize.Tokens.DOT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER,CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Curly},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Curly},CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PAIR_ARROW,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.AND,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnaryOpCall,CSTParser.BinaryOpCall},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Vcat}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Vcat}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Curly},CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.BinaryOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWDFWD_SLASH,true},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.CONTAINS_AS_MEMBER,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.DDDOT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly},CSTParser.EXPR{CSTParser.Curly}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Curly},CSTParser.EXPR{CSTParser.Curly}},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}}}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_SIGN,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.StringH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.StringH}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Curly}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.UNION,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNION,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNION,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.IN,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser._parse_ref, (CSTParser.LITERAL{Tokenize.Tokens.STRING}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.COLON_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_SIGN,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.QUAD_ROOT,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.AND_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.OR_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.DIVISION_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.REM_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RBITSHIFT_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT_EQ,true}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EX_OR_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.XOR_EQ,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUSPLUS,false}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quotenode}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.ELEMENT_OF,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.x_Str},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.REM,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MINUS,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.EXPR{CSTParser.Quotenode}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.UNICODE_DOT,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.MULTIPLICATION_SIGN,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.FALSE}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.ALMOST_EQUAL_TO,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}}, CSTParser.OPERATOR{Tokenize.Tokens.EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.WhereOpCall{CSTParser.WhereOpCall{CSTParser.EXPR{CSTParser.Call}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true},))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.MacroCall},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.MacroCall},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Begin},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.BinaryOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Vect}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Vect}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.StringH},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.FLOAT},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Filter}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.LITERAL{Tokenize.Tokens.CMD}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.LITERAL{Tokenize.Tokens.CMD}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.CMD},CSTParser.LITERAL{Tokenize.Tokens.CMD}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Vcat},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Hcat},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Hcat}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Hcat},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LBITSHIFT,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.BinaryOpCall,CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinaryOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_IS,false}))
    precompile(CSTParser.dropleadlingnewline, (CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_STRING},))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_STRING}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnaryOpCall, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Row}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinarySyntaxOpCall,CSTParser.UnarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH_EQ,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.EQ,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.EQ,true},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.UnarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.UnarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}, CSTParser.OPERATOR{Tokenize.Tokens.STAR,false}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.isunaryop, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.LESS_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.TupleH}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.TupleH}},))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQ,true},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.STAR,true}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.STAR_EQ,true},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.OPERATOR{Tokenize.Tokens.EQEQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.FALSE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.OPERATOR{Tokenize.Tokens.RING_OPERATOR,false},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.FWD_SLASH,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PRIME,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.BACKSLASH,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_EQUAL_TO,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.TRUE}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Let},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.x_Str},CSTParser.EXPR{CSTParser.x_Str}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.x_Str},CSTParser.EXPR{CSTParser.x_Str}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.ANON_FUNC,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.IDENTICAL_TO,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.OPERATOR{Tokenize.Tokens.RPIPE,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.IDENTIFIER, CSTParser.OPERATOR{Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Quotenode},CSTParser.IDENTIFIER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.ChainOpCall},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Vcat}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.KEYWORD{Tokenize.Tokens.CONTINUE},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.UnaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Vect}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Vect}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.StringH},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.EXPR{CSTParser.StringH}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.StringH},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.StringH}}, Array{Any,1}))
    precompile(CSTParser.dropleadlingnewline, (CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_CMD},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.TRUE},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_CMD},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.CONTINUE},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Vect}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Vect},CSTParser.EXPR{CSTParser.Vect}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Flatten}, Array{Any,1}))
    precompile(CSTParser.convert_iter_assign, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.issyntaxcall, (CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.INTERSECTION,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.OPERATOR{Tokenize.Tokens.CONDITIONAL,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Do},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Do},CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.TupleH},CSTParser.EXPR{CSTParser.TupleH}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.INTEGER}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER,false}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.BinarySyntaxOpCall, CSTParser.OPERATOR{Tokenize.Tokens.PLUS,true}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.OPERATOR{Tokenize.Tokens.GREATER_EQ,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Ref},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.InvisBrackets}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.InvisBrackets}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.IDENTIFIER},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Ref},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Quote},CSTParser.EXPR{CSTParser.Quote}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.UnaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.IDENTIFIER,CSTParser.IDENTIFIER,CSTParser.UnaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinarySyntaxOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_comp_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_power_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.LITERAL{Tokenize.Tokens.CHAR}, CSTParser.OPERATOR{Tokenize.Tokens.LESS,false}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.EXPR{CSTParser.Call}}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.BREAK}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.BREAK}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.BREAK}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.BREAK}}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.BREAK}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.BinaryOpCall,CSTParser.KEYWORD{Tokenize.Tokens.BREAK}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.CHAR},CSTParser.IDENTIFIER}}}}}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.Comparison},CSTParser.EXPR{CSTParser.Call},CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.LITERAL{Tokenize.Tokens.INTEGER},CSTParser.EXPR{CSTParser.Call}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.BinaryOpCall,CSTParser.BinaryOpCall}}},))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.Call},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.LITERAL{Tokenize.Tokens.STRING},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.IDENTIFIER,CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.ConditionalOpCall{CSTParser.BinaryOpCall,CSTParser.EXPR{CSTParser.InvisBrackets},CSTParser.EXPR{CSTParser.Call}}}}}, Array{Any,1}))
end
